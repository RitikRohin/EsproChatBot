,,,
from pyrogram import Client, filters, enums
from pyrogram.types import Message, ChatPermissions
import re
from EsproChat import app



# Function to check if message has a link
def has_link(text: str) -> bool:
    link_regex = r"(https?://|t\.me/|www\.|\.com|\.in|\.org|\.net|\.xyz|\.me|\.gg|\.tk|\.ml|\.link|\.co)"
    return bool(re.search(link_regex, text.lower()))


# Function to check if user is admin
async def is_admin(chat_id: int, user_id: int) -> bool:
    try:
        member = await app.get_chat_member(chat_id, user_id)
        return member.status in [enums.ChatMemberStatus.ADMINISTRATOR, enums.ChatMemberStatus.OWNER]
    except:
        return False


@app.on_message(filters.group & filters.text & ~filters.edited, group=4)
async def handle_links(_, message: Message):
    user = message.from_user
    chat_id = message.chat.id
    user_id = user.id
    text = message.text

    # Skip if no user (deleted account etc.)
    if not user:
        return

    # Check if user is admin
    admin = await is_admin(chat_id, user_id)

    # If user is not admin and message contains link, delete it
    if not admin and has_link(text):
        try:
            await message.delete()
            print(f"Deleted link message from {user.first_name}")
        except Exception as e:
            print(f"Failed to delete message: {e}")

    # Mute user if bio contains a link
    try:
        bio = user.bio or ""
        if has_link(bio):
            await app.restrict_chat_member(
                chat_id,
                user_id,
                permissions=ChatPermissions(),  # No permissions (mute)
            )
            await message.reply_text(
                f"ðŸ”‡ {user.mention} was muted due to a link in bio."
            )
    except Exception as e:
        print(f"Bio check failed: {e}")
,,,
